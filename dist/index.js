import{wrap as e,expose as s}from"comlink";class t{constructor(e){this.rAF=0,this.state={},this.canvas=e.canvas,this.isWorker=e.isWorker}getState(){return this.state}setState(e={}){this.state=Object.assign(Object.assign({},this.state),e)}}function n({canvas:s,worker:t,workerUrl:n},r,a=!1){return new Promise(((o,i)=>{if(s.transferControlToOffscreen&&!a)try{const a=t||new Worker(n,{type:"module"}),i=s.transferControlToOffscreen();a.addEventListener("message",(s=>{if("ready"===s.data){const s=e(a);o(s)}})),a.postMessage({message:"init",options:Object.assign({canvas:i,isWorker:!0},r)},[i])}catch(e){i(e)}else{const e=document.createElement("script"),t=n instanceof URL?n.toString():n;e.src=t,e.async=!0,e.onload=()=>{o(window[t](Object.assign({canvas:s,isWorker:!1},r))),window[t]=null},e.onerror=e=>i(e),document.head.appendChild(e)}}))}function r(e){self.addEventListener("message",(({data:{message:t,options:n}})=>{"init"===t&&(s(e(n)),self.postMessage("ready"))}))}export{t as BaseEntity,n as createOffscreenCanvas,r as initializeWorker};
