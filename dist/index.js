import{wrap as e,expose as s}from"comlink";class t{constructor(e){this.rAF=0,this.state={},this.canvas=e.canvas,this.isWorker=e.isWorker}getState(){return this.state}setState(e={}){this.state=Object.assign(Object.assign({},this.state),e)}}function n({canvas:s,worker:t,WorkerConstructor:n,workerUrl:r},o,a=!1){return new Promise(((i,c)=>{if(s.transferControlToOffscreen&&!a)try{const a=t||(n?new n:new Worker(r,{type:"module"})),c=s.transferControlToOffscreen();a.addEventListener("message",(s=>{if("ready"===s.data){const s=e(a);i(s)}})),a.postMessage({message:"init",options:Object.assign({canvas:c,isWorker:!0},o)},[c])}catch(e){c(e)}else{const e=document.createElement("script"),t=r instanceof URL?r.toString():r;e.src=t,e.async=!0,e.onload=()=>{i(window[t](Object.assign({canvas:s,isWorker:!1},o))),window[t]=null},e.onerror=e=>c(e),document.head.appendChild(e)}}))}function r(e){self.addEventListener("message",(({data:{message:t,options:n}})=>{"init"===t&&(s(e(n)),self.postMessage("ready"))}))}export{t as BaseEntity,n as createOffscreenCanvas,r as initializeWorker};
